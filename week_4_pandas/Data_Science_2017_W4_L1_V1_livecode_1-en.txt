- We have just reviewed
why the Pandas library in Python is very useful,
and talked about the two main data structures in it.
Let's get started with our Pandas notebook
to review these data structures.
To follow along,
please open Introduction to Pandas notebook
in your folder for Week Four.
If you're ready,
let's now try importing the Pandas module
as a part of our notebook.
So you see, here in this line,
it says 'import pandas as pd.'
We'll run that.
Now our notebook is ready to use
Pandas functions.
Before we dive into the details of those Pandas functions,
let's review our two main data structures
we just talked about.
The first one is Pandas series.
Here,
we create a series object called
s, e, r, ser I'll refer to
as.
Which is like an NumPy array
But we can define the index labels, as you see here,
together with the data.
So, I say
s, e, r, ser=
Pandas series, in parentheses,
data equals
an array
comma index equals, and we can name our indices
anything we want there.
We can actually
go through and we see that all of them are names.
When I run this,
the ser will be created.
And when we off put ser,
we'll see,
the data array indexed by those names we put
in our data structure.
So, instead of indices being zero through four,
we have a five-element series
with indexes defined as tom, bob, nancy, etc.
Although I defined the data and index
using a clear format in this example,
we could have skipped data and index equals.
So, I could have just done,
get rid of index,
and get rid of data.
And the output will end up being the same
because Pandas know how to resolve those two arrays
into a series data structure.
Another thing to recognize about the series
compared to NumPy array
is that the data types can be heterogeneous.
So, if I switched some of the data with strings,
like I'll say here,
maybe, foo,

And then I'll go change another one of these to
maybe bar.
I'll see that those values will change.
If any, at any point you get confused about indices,
you can display the index like we have here s, e, r.
Ser.index.
And it's going to give you the list of all the indices.
(clears throat)
We can use any of the indices
by using it within rectangular brackets
to access data at that location.
So, I'll say ser, and I'll use 'nancy' as the index.
And, when we look at our data here,
the nancy index points to
value 300.
So, if we run this we indeed get 300 as the output.
Alternatively,
we could have used a log function
of the series object to get the value out of the location.
So instead of ser['nancy'],
if I said ser.loc['nancy'],
I'm saying give me the location
the, the value at the location index by 'nancy'.
And we see that the output will be the same.
Now, if we wanted to access multiple locations,
we could type,
let's say ser, we pass it an array
of 'nancy' and
'bob'
as the indexes.
And if we run this,
it's going to give us the two data values
indexed by 'nancy' and 'bob'.
Another way to access data at the series location
is to use a numeric indices.
Here we access elements for
three and one in ser.
A reminder that, like all other array indices,
series indices also start by zero.
So let's go ahead and run this.
We'll see that,
locations four, indexed by 'eric'
three, indexed by 'dan',
and one, indexed by 'bob' are displayed.
We can also use the iloc function
to achieve the same thing by typing-
let's copy and paste this just to be clear.
By typing
iloc
[2]
and it should give us the value in,
the second
zero, one, two, second index appointed by 'nancy'.
Next in this notebook,
you see usage of, an index, and checking if an index
exists in a series.
So, you can check quickly if a data value
indexed by 'bob' exists in ser object,
so I'll just say, 'bob' in ser
and you'll that's it going to evaluate to three
because we have 'bob' as one of our indices in this object.
We can also use Python operations on a series
just like we did in that part here.
We multiplied the whole series by two,
so let's run this.
So we see that,
actually let's, before that,
copy and paste, and first display series.
We see the values in that.
And, here, I'm multiplying those values
by two.
If you noticed something interesting
related to strings, you're on the right path.
When I multiply the string values to be
by two, they'll get repeated two times.
We can also do
a calculation of squares of the series' data elements.
Let's do that.
And, in this case, we'll have an error.
Because it doesn't know how to evaluate the squares
of
the
strings.
So, instead, let's get the locations
from the numeric ones.
'nancy'
and
'eric'
and repeat the same operation.
You'll see that
on the part of the series that we took out
of our series object, ser object.
We can calculate those squares.
Next, we will talk about Pandas data frames.
There are many ways to create data frames .
We often just read and ingest data into a data frame,
but before we do that,
let's create data frames manually,
and review some simple way to work with those data frames.
Let's start by creating a data frame
out of a dictionary of series of objects.
Remember, we are adding another dimension
to our data structure,
so we need to label each series object.
So, let's just go ahead and create a dictionary.
All right, d =,
and
in the first label, 'one',
we have a series with some values and indices,
'apple', 'ball', 'clock'.
And in the second one,
we name it two,
and we have a series with 111 and some things with numbers,
and
and indices, four indices associated to those.
So, I'll go ahead and run this.
Now that we have a dictionary,
we can load this data into a data frame called
df.
We'll type df = pd.DataFrame(d)
in parenthesis, we'll give it as an input the dictionary
that we just created
and they'll just display the contents of df.
So, if I run this, I'll see that
two columns for the data are generated,
and the series and the dictionary
are merged in the data frame.
Notice that index labels are merged as well,
which resulted in
having indices 'apple', 'ball', 'cerill', 'clock',
and 'dancy' as series labels,
they're all labels in this case.
And one and two as the column labels.
And we see that
actually, the first column, the series one
that was labeled by one,
didn't have some of those indices.
Like, it didn't have 'cerill' and 'dancy'
like the second one does.
There, those values will show up as NaN.
That means not a number, to indicate there was no value
for that or that value was indefined for the index
in that series.
So, when we say df,
the output is shown in a clear, tabular format.
But, we could have also printed df,
which changes the formatting a little bit.
So, let's actually go ahead and say here,
we type print(df) in that In [25] line.
Instead of df, I turned the second line into print(df).
If I run this again, I'll see that
it's printed in a little bit of a different way.
Same type of format, but the formatting changed.
If you're again confused of these,
about the column and index
labels are,
you can print them out by saying
df.index, and let's run that.
And df.columns.
And it shows you, also those are type object.
We could have also selected
some of the index numbers and columns.
And now we'll use some of these.
Here in this line.
In,
In 36 as it point out now,
if we say pd.DataFrame
and give dictionary as the input to it,
and we only pick indices 'dancy', 'ball',
and 'apple'
for column indexes from the series that we have
in the dictionary d.
So, if I run this,
I'll see that
row labels are 'dancy', 'ball', 'apple' on the subset
of the data that was in the dictionary
got turned into a data frame.
Now, we can select the column label that doesn't exist.
Just like we do here.
And we are creating a data frame with that dictionary.
Just like we did in 29 in this.
Now I want line, in 37 according to this notebook.
I pick the row labels 'dancy', 'ball', 'apple'
just like I did in the line above,
but I'm adding new columns to it.
Remember my dictionary had 'one' and 'two' as columns.
Instead, I'm asking,
give me columns 'two' and 'five.'
When we do that,
we selected the label that doesn't exist,
'five',
so all of the values in that column,
as we see here
will show up as NaN for undefined.
We can also create data frames
from regular Python dictionaries rather than a series.
A set of series objects.
Here, we have a data array of two dictionaries,
'alex', 1, 'joe', 1 is in 1.
And the second one, as you see there,
Ema, Dora, Alice, pointing out to some numeric values.
We can load it into a data frame using pd.DataFrame,
the data frame creation function for creating an object.
A data frame object.
And load data directly into it.
So, if I run this, they'll see that
alex, alice, dora, ema, joe.
The label's here got created
as columns,
and the row labels are zero and one.
Because we didn't provide index labels,
we will use as row indices,
so it's like arrays starting with zero and one
that numerically get indexed.
I can provide an index label array to this data frame.
So, if I say, pd.DataFrame
and I give the data,
and provide index 'orange' and 'red' as index labels,
the same data frame will be created
by the set of zero and one,
I'll have orange and red as different
row labels.
Just like we did before,
we can select some of the elements from the dictionary
as columns to constrain the data set we've worked with.
So, here,
we do pd.DataFrame
and
data, and we give the columns 'joe', 'dora', 'alice'.
When we create this data frame,
we will have rows again indexed by 0 and 1,
and we'll have only the columns we selected
from the original data set
data dictionaries.
Now, how do we get data out of a data frame?
And how do we use those basic data frame operations.
Let's go back to our original data frame.
Okay, df, if I display that,
I will rem- you remember that
one and two were column labels,
and apple, ball, cerill, clock, dancy were
row labels in them.
We can use a label for columns
to select a column out of the frame.
So, when you say df,
in square brackets,
1 as the index,
we receive a series object in return.
Index by, again, apple, ball,
will have the row indices.
But we'll have one of these columns displayed.
Using these columns,
we can actually create new columns,
and add or insert them to the data frame on the fly.
So, here I'll create a third column
in my
data frame, df.
We'll call it df['three'],
and it will be the multiplication of the values
in df['one'] and df['two'].
We will see that the third column
was created from that
as a set of,
as a function of columns one and two.
In the next one,
we have logic operation.
I want to add another column, called 'flag',
which, rather than a numerical operation,
like multiplication,
I'll use a logical operation
which results in a boolean value being generated.
I will use df['flag]=
df['one'] >
250.
It's going to give us true for the values
that are greater than 250 in column one.
So when you look at it,
it holds 200 to 100 are false.
NaN should be false by nature.
But 300 is a a number that's greater than 250,
like we specified,
so it's going to evaluate to true.
And NaN, again, we can't compare that to any number,
so it's false.
So we have that fourth column there called flag.
So now, how do we
remove or delete data from data frames, okay?
Df.pop is used to return the column
it's provided with its I.D.
and delete or drop that column from the frame.
So, if we say here
three, the value, three, a variable name
is a
the column three
out of this df data frame,
we'll see that
three was returned.
Column three was returned as a series object.
And, when I display the df, again,
we'll see that third column is gone.
So, we popped it out,
assigned it to a variable,
and it permanently removes column three from our data frame.
So that column is gone.
We could have also used
the del function to delete columns.
So, here, we see
del df,
and as an index, 2 is provided.
If we run that
display df,
we'll see that the second column,
column indexed by 2 is gone and deleted
out of our df permanently.
However, in this case,
we didn't get the output displayed.
Unlike the pop operation.
This last example is interesting
as it creates a new column by selecting the first two rows
of another column.
We do here df.insert,
so we are inserting something into df, our data frame.
And
We will name that, the label,
'copy_of_one'.
Okay?
And it's going to exactly copy that one
into that second column.
So it's going to add to the end of this data frame
a column that looks exactly like column one,
but it's index, column index
or label is 'copy of one'.
Here,
we are actually changing things a little bit, okay?
We are saying
get the first
two values
in data frame column one,
and assign it to a data frame column
called 'one_upper_half'.
So then we do that,
and run this, we'll see that
we'll have
any column here,
with the first two values in column one,
and the rest of the columns,
the rows in this column show up as undefined.
Through the rest of this lesson,
we'll be using a movie data set
analysis as a case study.
In the upcoming videos,
we will provide you with some examples
of using the Pandas for data ingestion,
generating descriptive statistics on data,
data cleaning,
subsetting,
filtering, insertion, deletion and aggregation.
As well as introduce you
to the basics of working with time stamps.