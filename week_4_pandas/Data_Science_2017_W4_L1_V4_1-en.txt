- We will now review
some of the important
and most used data cleaning functions in Pandas.
By the end of this video
you should be able to explain
why there's a need to clean data,
describe data cleaning as an activity,
and leverage key methods Pandas provides for data cleaning.
As we mentioned before during our data science overview,
real-world data is messy.
It can have problems related to missing values,
outliers in the data,
an invalid data, for instance, negative values for age,
and in Python we can also have records
within DataFrames
as NaN or none values.
Since we get the data downstream,
we usually have no or little control
over how the data is collected.
So, we have the data we get
and we have to address quality issues
by detecting and correcting them.
All of these are related to making the data
really ready for analysis in the end.
So, how do we clean?
Here are some approaches in Pandas
that we can take
advantage of to address these data quality issues.
We can replace invalid
or NaN values with more appropriate values.
For invalid values again or gaps
we can also try to fill in the data
instead of removing them.
Here, a best estimate for a reasonable value
can be used as a replacement.
There can be different techniques
to find the best estimate
and often domain knowledge is required
to understand what would be that best estimate.
For example,
for a missing age value of an employee,
a reasonable value can be estimated
based on the employee's length of employment.
An interpolation of the data values
can also be applied to generate estimations
of those missing values.
Based on how the exploratory and statistical analysis
of the dataset goes,
we can also think of dropping
some of the fields and values
that are not important to the task.
Outliers, for example,
might be dropped depending on the situation.
Let's quickly look at some of the functions in Pandas
before we review them in the Notebook.
Using the replace function
we can globally change values in a DataFrame.
The screenshot shown here
shows how we can replace every 9999
with a zero instead.
Fillna method will replace missing values
with the last known value forward and backward,
meaning going up and going down
in the column.
If you look at the values
in the first DataFrame shown here,
the row one, row index one,
and column one,
you will notice that the forward fill
replaces the NaN value in that column
with the value
of row zero, column one in the forward fill case.
So, if you look at the second DataFrame,
row one, column zero
will no longer be NaN,
it's gonna be the value stored in row zero, column zero.
In the backward fill,
the same row gets replaced by the value
in row two, column one.
So, it's going upwards in the DataFrame.
Another function that we'll use a lot
is called dropna
to drop the fields with missing values.
So, dropna function will drop any row or column
with a missing value in the DataFrame.
With the axis zero option,
which is also the default for dropna,
any rows with missing values will be eliminated
or it's going to be taken out of the DataFrame.
So, if you look at here,
row zero, one, five and six
are no longer in the DataFrame
after executing the dropna function with axis zero.
With the axis one option,
any columns with missing values
will be eliminated.
In this case,
suppose column zero and one
has NaN values in them,
we are left with only column two in the resulting DataFrame.
You can also interpolate values
in both series and DataFrame objects.
The default for interpolate function
is a linear interpolation,
meaning the method tries to fit the values
to occur over line using linear polynomials,
like the point XY
in the graphic on this slide.
There other interpolation methods to pick from as well
but we'll leave it at linear interpolation
in this introduction class.
As a summary,
there are many ways to deal with missing data
and Pandas provides many easy ways to tackle them.
We only scratch the surface here
but please follow the links provided in this video
for a starting point on further methods.
Let's now switch to our Notebook
to see what we have discussed in action.